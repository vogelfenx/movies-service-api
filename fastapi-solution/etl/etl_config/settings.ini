[etl]
sleep_time=10
storage_file_path=states/state.json
log_file_path=logs/debug.log

[postgres]
backoff_start_sleep_time=0.5
backoff_factor=2
backoff_border_sleep_time=10
bulk_size = 100

sql_get_cur_dttm=SELECT now()::timestamp(0)::varchar

sql_fw_get_films: SELECT
                    fw.id as id,
                    fw.rating as imdb_rating,
                    array_agg(DISTINCT g.name) as genres,
                    fw.title as title,
                    fw.description as description,
                    COALESCE (
                        json_agg(
                            DISTINCT jsonb_build_object(
                                'person_role', pfw.role,
                                'person_id', p.id,
                                'person_name', p.full_name
                            )
                        ) FILTER (WHERE p.id is not null),
                        '[]'
                    ) as persons
                FROM content.film_work fw
                LEFT JOIN content.person_film_work pfw ON pfw.film_work_id = fw.id
                LEFT JOIN content.person p ON p.id = pfw.person_id
                LEFT JOIN content.genre_film_work gfw ON gfw.film_work_id = fw.id
                LEFT JOIN content.genre g ON g.id = gfw.genre_id
                WHERE fw.modified BETWEEN %s and %s
                GROUP BY fw.id


sql_g_get_genre_ids: SELECT
                        id as genre_id,
                        modified as modified
                     FROM content.genre
                     WHERE modified BETWEEN %s and %s
                     ORDER BY modified
                     LIMIT 100


sql_g_get_film_ids: SELECT
                        fw.id as fw_id,
                        fw.modified as modified
                    FROM content.film_work fw
                    LEFT JOIN content.genre_film_work gfw ON fw.id = gfw.film_work_id
                    WHERE gfw.genre_id IN %s
                    ORDER BY fw.modified
                    LIMIT 1000


sql_g_get_films: SELECT
                    fw.id as id,
                    fw.rating as imdb_rating,
                    array_agg(DISTINCT g.name) as genres,
                    fw.title as title,
                    fw.description as description,
                    COALESCE (
                        json_agg(
                            DISTINCT jsonb_build_object(
                                'person_role', pfw.role,
                                'person_id', p.id,
                                'person_name', p.full_name
                            )
                        ) FILTER (WHERE p.id is not null),
                        '[]'
                    ) as persons
                 FROM content.film_work fw
                 LEFT JOIN content.person_film_work pfw ON pfw.film_work_id = fw.id
                 LEFT JOIN content.person p ON p.id = pfw.person_id
                 LEFT JOIN content.genre_film_work gfw ON gfw.film_work_id = fw.id
                 LEFT JOIN content.genre g ON g.id = gfw.genre_id
                 WHERE fw.id IN %s
                 GROUP BY fw.id


sql_p_get_person_ids: SELECT 
                        id as person_id,
                        modified as modified
                      FROM content.person
                      WHERE modified BETWEEN %s and %s
                      ORDER BY modified
                      LIMIT 100

sql_p_get_film_ids: SELECT fw.id as fw_id,
                           fw.modified as modified
                    FROM content.film_work fw
                    LEFT JOIN content.person_film_work pfw ON pfw.film_work_id = fw.id
                    WHERE pfw.person_id IN %s
                    ORDER BY fw.modified
                    LIMIT 1000

sql_p_get_films: SELECT
                    fw.id as id,
                    fw.rating as imdb_rating,
                    array_agg(DISTINCT g.name) as genres,
                    fw.title as title,
                    fw.description as description,
                    COALESCE (
                        json_agg(
                            DISTINCT jsonb_build_object(
                                'person_role', pfw.role,
                                'person_id', p.id,
                                'person_name', p.full_name
                            )
                        ) FILTER (WHERE p.id is not null),
                        '[]'
                    ) as persons
                FROM content.film_work fw
                LEFT JOIN content.person_film_work pfw ON pfw.film_work_id = fw.id
                LEFT JOIN content.person p ON p.id = pfw.person_id
                LEFT JOIN content.genre_film_work gfw ON gfw.film_work_id = fw.id
                LEFT JOIN content.genre g ON g.id = gfw.genre_id
                WHERE fw.id IN %s
                GROUP BY fw.id

[elastic]
elastic_url=movies_elasticsearch
index_name=movies
index_file_path=etl_config/es_schema.json
backoff_start_sleep_time=1
backoff_factor=2
backoff_border_sleep_time=10